283. Move Zeroes #take 2, working solution
class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        if len(nums) == 1:
            return
        j=0
        for i in range(len(nums)):
            if nums[i] != 0:
                nums[i], nums[j] = nums[j], nums[i]
                j+=1

283. Move Zeroes #take 1
class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        if len(nums) == 1:
            break
        for i in range(len(nums)):
            if nums[i] == 0:
                for j in range(i,len(nums)-1):
                    temp = nums[j]
                    nums[j] = nums[j+1]
                    nums[j+1] = temp

334. Increasing Triplet Subsequence - can do better job
class Solution:
    def increasingTriplet(self, nums: List[int]) -> bool:
        n = len(nums)-1
        m = len(nums)
        if m < 3:
            return False

        if m == 3:
            if nums[0] < nums[1] and nums[1] < nums[2]:
                return True
            else:
                return False

        left_min = [0] * m
        right_max = [0] * m
        left_min[0] = nums[0]
        right_max[m-1] = nums[m-1]
        for i in range(1,n+1):
            if nums[i] < left_min[i-1]:
                left_min[i] = nums[i]
            else:
                left_min[i] = left_min[i-1]
        for i in range(n-1, 0, -1):
            if nums[i] > right_max[i+1]:
                right_max[i] = nums[i]
            else:
                right_max[i] = right_max[i+1]
        for i in range(n):
            if left_min[i] < nums[i] and nums[i] < right_max[i]:
                return True
        return False

#334. Increasing Triplet Subsequence - approach 1, not working
class Solution:
    def increasingTriplet(self, nums: List[int]) -> bool:
        n = len(nums)
        count = 0
        if n < 3:
            return False
        for i in range(n-2):
            if nums[i] < nums [i + 1] and nums[i + 1] < nums [i + 2]:
                return True

        return False

#238. Product of Array Except Self - incomplete - approach 3, from youtube
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        n = len(nums)
        left_arr = [0] * n
        right_arr = [0] * n
        left_mult = 1
        right_mult = 1

        for i in range(n):
            j = -i -1
            left_arr[i] = left_mult
            right_arr[j] = right_mult
            left_mult *= nums[i]
            right_mult *= nums[j]

        return [l*r for l, r in zip(left_arr, right_arr)]

#238. Product of Array Except Self - incomplete - approach#2
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        output = []
        j=0
        mul = 1
        for i in range(len(nums)):
            mul = mul * nums[i]
        for i in range(len(nums)):
            if i == j:
                if nums[i] == 0:
                    output.append(0)
                else:
                    output.append(mul // nums[i])
            j += 1

        return output
#238. Product of Array Except Self - incomplete
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        output = []

        for i in range(len(nums)):
            mul = 1
            for j in range(len(nums)):
                if i != j:
                    mul = mul * nums[j]

            output.append(mul)

        return output
#1071. Greatest Common Divisor of Strings - incomplete
class Solution:
    def gcdOfStrings(self, str1: str, str2: str) -> str:
        i = len(str1)
        j = len(str2)

        if i > j
            for x in range(i):
                if str1[]

        def isDivisor(value, divisor):
            y = 0
            divisor_length = len(divisor)
            for x in range(len(value)):
                if value[x] == divisor[y]:
                    y += 1
                    if y == divisor_length -1
                        y = 0
                else:
                    return False
            return True

#345. Reverse Vowels of a String
class Solution:
    def reverseVowels(self, s: str) -> str:
        vowels_list = []
        for i in range(len(s)):
            if s[i] in "aeiouAEIOU":
                vowels_list.append(s[i])
        vowels_list.reverse()
        j = 0
        returnstr = []
        for i in range(len(s)):
            if s[i] in "aeiouAEIOU":
                returnstr.append(vowels_list[j])
                j = j + 1
            else:
                returnstr.append(s[i])
        return ''.join(returnstr)
#605. Can Place Flowers - lot of usecases
class Solution:
    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:
        max = 0
        if n == 0:
            return True
        if len(flowerbed) == 1:
            if flowerbed[0] == 1:
                return False
            else:
                return True
        for i in range(0, len(flowerbed)-1):
            if flowerbed[i] == 1:
                continue
            else:
                if i == len(flowerbed)-1:
                    if flowerbed[i] == 0 and flowerbed[i-1] == 0:
                        flowerbed[i] = 1
                        max += 1
                else:
                    if i == 0 and flowerbed[i] == 0 and flowerbed[i+1] == 0:
                        flowerbed[i] = 1
                        max += 1
                    else:
                        if flowerbed[i-1] == 0 and flowerbed[i+1] == 0:
                            flowerbed[i] = 1
                            max += 1
                            continue
                        if i == len(flowerbed)-2 and flowerbed[i+1] == 0:
                            flowerbed[i] = 1
                            max += 1

        if max >= n:
            return True
        else:
            return False

#151. Reverse Words in a String
class Solution:
    def reverseWords(self, s: str) -> str:
        words_list = []
        word = ''
        for i in range(len(s)):
            if s[i] == ' ':
                if word.strip() != "":
                    words_list.append(word.strip())
                word = ''
            else:
                word += s[i]

            if i == len(s)-1 and word.strip() != "":
                    words_list.append(word.strip())

        words_list.reverse()
        final_word = ' '.join(words_list)
        return final_word

#1768. Merge Strings Alternately
class Solution:
    def mergeAlternately(self, word1: str, word2: str) -> str:
        len1 = len(word1)
        len2 = len(word2)
        merged = ""

        if len1 > len2:
            for i in range(len2):
                merged = merged + word1[i] + word2[i]
            merged = merged + word1[len2:]
        else:
            for i in range(len1):
                merged = merged + word1[i] + word2[i]
            merged = merged + word2[len1:]
        
        return merged  

#1431. Kids With the Greatest Number of Candies - working solution
class Solution:
    def kidsWithCandies(self, candies: List[int], extraCandies: int) -> List[bool]:
        maxi = 0
        
        for i in range(len(candies)):
            if candies[i] > maxi:
                maxi = candies[i]

        returnlist = []

        for i in range(len(candies)):
            if candies[i] + extraCandies >= maxi:
                returnlist.append(True)
            else:
                returnlist.append(False)
        
        return returnlist